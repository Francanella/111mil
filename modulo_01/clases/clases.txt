111mil
Técnicas de programación
Contenido de las clases

---------------------------------------------------------------------
Clase 01: Presentación
Fecha: Lunes 11 de septiembre
---------------------------------------------------------------------
Computadoras
Software
Sistemas
Algoritmos

---------------------------------------------------------------------
Clase 02: Fundamentos
Fecha: Miércoles 13 de septiembre
---------------------------------------------------------------------
Que es una computadora?
Que es un programa?
Que significa programar?
Que es un lenguaje de programación?
Abstracción de la información
  El porqué de la representación binaria
  Representación binaria de
    Números enteros positivos
    Números enteros negativos
    Números decimales (reales)
    Caracteres
      ASCII
      ASCII Extendido
      UNICODE
    Imágenes
      Monocromo
      VGA
      24 Bits


---------------------------------------------------------------------
Clase 03: Introducción a los algoritmos
Fecha: Sábado 16 de septiembre
---------------------------------------------------------------------
  Pseudocódigo

  Tipos de datos fundamentales:
    Enteros
      1
      123
      1231231231231
      -2323
      0
    Decimales
      1.5
      1.0
      123.0
      -2323.0
    Lógicos
      verdadero - true
      falso - false
    Caracteres
      'A'
      'a'
      '0'
      '3'
      '*'
    Cadenas de caracteres
      "hola"
      "bettina"
      "claudio altamiranda"
      "   "
      ""
      "A"
-----------------------------------------------------------
  Constantes o literales
    Son los datos.
    Tienen un valor constante.
    Corresponden a un tipo de datos determinado.
    1
    "hola"
    "Hola"
    'a'
    true
    verdadero
    false
    falso
    3.14
-----------------------------------------------------------
  Operadores
    Representan las operaciones que se pueden realizar con los distintos tipos de datos.
    Permiten crear expresiones.
    Las expresiones tienen un valor (resultado).

    + operador mas: es el operador que representa la suma
      1 + 2    --->  3
      5.0 + 10.5 ---> 15.5
      10 + 2.5 ---> 12.5
      "hola" + "mundo"  ---> "holamundo"
      "hola " + "mundo"
      "hola" + " " + "mundo"
    - operador menos: resta
      1 - 2  ---> -1
      10.5 - 0.5  ---> 10.0
      10 - 2.5  ---> 7.5
    * operador multiplicación: producto
      10 * 2
      10.5 * 3.0
      10.5 * 2
    / operador división: cociente
      10 / 2  ---> 5
      10 / 3  ---> 3
      15.0 / 3.0  ---> 5.0
      10 / 3.0  ---> 3.3333
    % operador módulo: resto de la división entera
      10 % 2  ---> 0
      10 % 3  ---> 1
      11 % 3  ---> 2
    == igualdad: comparación
      10 == 3  ---> falso
      3 == 3  ---> verdadero
      4 == 2 + 2  ---> verdadero
    != distinto - diferente <>
      10 != 3  ---> verdadero
      3 != 3  ---> falso
      4 != 2 + 2  ---> falso
      "hoLa" != "Hola"  ---> verdadero
    < operador "menor que" 
      10 < 3   ---> falso
      3 < 10   ---> verdadero
      3 < 3    ---> falso
      'a' < 'b'  ---> verdadero
      'z' < 'A'  ---> falso  "ABCDE...Zabcde...z"
                  'A' ---> 65
                  'a' ---> 97
      "hola" < "mundo"   ---> verdadero
    > operador "mayor que"
      10 > 3  ---> verdadero
      3 > 10  ---> falso
      3 > 3   ---> falso
    <= operador "menor o igual a"
    >= operador "mayor o igual a"

    & operador "y" o "and" (lógico)
      verdadero & verdadero  ---> verdadero
      falso & verdadero  ---> falso
      verdadero & falso  ---> falso
      falso & falso  ---> falso

    | operador "o" o "or" (lógico)
      verdadero | verdadero  ---> verdadero
      verdadero | falso  ---> verdadero
      falso | verdadero  ---> verdadero
      falso | falso  ---> falso

-----------------------------------------------------------
  Variables
    Se refiere a un lugar en la memoria de la computadora.
    Sirven para almacenar o conocer un valor almacenado.
    Una variable permite manejar un solo valor a la vez.
    Si se almacena un valor se pierde el anterior.
    Las variables tienen un nombre:
      ese nombre debe comenzar con una letra
        a
        i
      puede tener uno o más caracteres
        nombre
        valor1      
      no se pueden usar espacios en blanco
        direccion postal    ---> no es un nombre correcto
      Se pueden usar símbolos
        direccion_postal
      Se aconseja no usar caracteres extendidos
        (á é í ñ Ñ)
        mejor: anio
        peor: año
      se aconseja que el primer caracter sea una letra
        minúscula

        direccionPostal
        lugarDeNacimiento
        salarioNeto

    Las variables tienen un tipo de datos
      pueden ser enteras, decimales, caracter, cadena de caracteres, lógicas

-----------------------------------------------------------
  Pseudocódigo
    Es un lenguaje similar a los lenguajes de programación
    Se utiliza para aprender a programar
    También se utiliza para diseñar una solución que luego se implementará en algún lenguaje de programación.
    Emplea tipos de datos simples.
    Consta de palabras reservadas, normalmente, en castellano.
    Es una de las principales herramientas empleadas para formalizar algoritmos (resolver problemas lógicos).

  Formalización del pseudocódigo
    Inicio
      indica el inicio del algoritmo representado en pseudocódigo.
    Fin
      indica el final.


  Estructuras secuenciales
    Es un conjunto de instrucciones.
    Se ejecutan en orden desde la primera a la última.
    Se ejecutan todas.

  Declaraciones
    Son instrucciones donde se "declara" algo
    Por ejemplo:
      Inicio declara el inicio del programa
      Fin declara el fin del programa
      Entero edad      declara que se va a usar una
                      variable llamada edad y que
                      va a contener un valor entero
      Decimal salario
                      declara que se va a usar una
                      variable llamada salario y que
                      va a contener un valor decimal
                      


  Asignación
    Es la operación en la cual se "asigna" o carga un valor a la posición de la memoria referida por una variable.
    El símbolo de la asignación es el igual =
    Ejemplo:
      a = 10

      asigna el valor 10 a la posición de la memoria a la que se refiere la variable a

      a la izquierda del signo igual siempre debe haber una variable

      a la derecha debe haber una expresión de un tipo de datos compatible.
      
      pi = 3.14
      nombre = "Cristian"
      direccion = "San Martín 999"
      ciudad = "Azul"
      letra = 'a'
      casado = verdadero
      mentiroso = falso


  

---------------------------------------------------------------------
Clase 04: 
Fecha: Lunes 18 de septiembre
---------------------------------------------------------------------
Práctica: Tipos de datos
Cuantos de los siguientes valores pertenecen a cada tipo de datos (enteros, decimales, lógicos, caracteres, cadenas de caracteres) y cuantos son erróneos?
<<<<<<< HEAD
  123              E       CADENA:   6
  "argentina"      S       ENTERO:   4
  18              E       DECIMAL:  4
  'a'              C       CARACTER: 3
  8.88801          D       LOGICO:   2
  "12345"          S       ERROR:    9
  true            L
  ""              S
  880              E
  'X'              C
  8.000 1          ERR
  '1100'          ERR
  "canción"        S
  1,234,567.98    ERR
  0.1              D
  '1'              C
  '17'            ERR
  ''              ERR
  "precio         ERR
  3.14             D
  0.00001          D
  'buenos aires'  ERR
  0 03             ERR
  "d'artagnan"     S
  false           L
  4,45             ERR
  1200             E
  "ahora"         S

---------------------------------------------------------------------
Práctica: Operadores
  Suma            +
  Resta           -
  Producto         *
  División         /
  Módulo           %
  And             &
  Or               |

---------------------------------------------------------------------
Operadores (2da parte)
  Potencia
    2^3   -->  2 al cubo  --> 2 * 2 * 2  --> 8
    2^4   -->  2 a la cuarta --> 2 * 2 * 2 * 2 --> 16
    2^5   -->  32
    3^2   -->  3 al cuadrado --> 3 * 3 --> 9
    3^4    -->  3 a la cuarta --> 3 * 3 * 3 * 3 --> 81 

  Orden de precedencia de los operadores aritméticos
    2 * 2 + 2
      4   + 2
          6

    2 + 2 * 2
    2 +   4
      6

    La multiplicación tiene precedencia sobre la suma
    y la resta

    3 * 3 - 3
      9   - 3
          6

    3 - 3 * 3
    3 -   9
      -6

    La división, también, tiene precedencia sobre la
    suma y la resta

  Paréntesis
    Los paréntesis () permiten alterar el orden de
    precedencia de los operadores.

    2 + 2 * 2 
    2 +   4
      6

    (2 + 2) * 2
       4    * 2
             8

    Anidar paréntesis
    ((4 + 2) * 2) - 2
    (   6    * 2) - 2
            12    - 2
                 10

---------------------------------------------------------------------
Práctica: Variables 
  Cuales están ok y cuales son recomendables?
  XRayo     ok         no
  X_Rayo     ok         no
  R2D2       ok         no
  X         ok         no
  45         mal 
  N14       ok         no
  ZZZZ      ok         no
  3μ         mal  
  nombre     ok         si
  suma       ok         si
  monto     ok         si
  i         ok         si
  n1         ok         si
  n2         ok         si
  3n         mal

---------------------------------------------------------------------
Variables (2da parte)
  Nombres (recomendación): CamelCase o notación húngara

  montoTotal
  importeNeto
  nombreCompleto
  
  (UpperCase: mayúsculas)
  (LowerCase: minúsculas)



---------------------------------------------------------------------
Práctica: Asignación        a   b   c   d
  a = 1                     1
  b = 2                     1   2
  c = a                     1   2   1
  d = a + c                 1   2   1   2
  d = b                     1   2   1   2
  Valor final de b? 2

                      a     b
  a = 1               1     -
  b = 2               1     2
  a = b               2     2
  b = a               2     2
  Valor final de a y de b? ambos valen 2

                      a     b     aux
  a = 1               1     -     -
  b = 2               1     2     -
  aux = a             1     2     1
  a = b               2     2     1
  b = aux             2     1     1
   Valor final de a y de b? a: 2 y b: 1

   horasTrabajadas = 10
   precioPorHora = 100
   descuento = 0.10
   sueldoBruto = horasTrabajadas * precioPorHora
                       10        *     100
                               1000
   obraSocial = sueldoBruto * descuento
                   1000     *    0.1
                           100
   sueldoNeto = sueldoBruto - obraSocial
                   1000     -    100
                           900
   Calcular sueldoNeto: 
     sueldoBruto = 1000
     obraSocial = 100
     sueldoNeto = 900


  n = 100
  m = 101
  n = "hola"
  Valor final de n?    Error: porque cada variable
                      puede tener valores de un
                      solo tipo de datos

---------------------------------------------------------------------
Asignación (2da parte)
  Sintáxis
    a = 1
    Quiere decir: almacenar en la memoria "apuntada" por a, el valor 1.  Siempre y cuando la variable a sea de tipo entero.

    En la práctica, se puede decir, "a toma el valor de 1"

    Si, la variable a, tenía un valor anterior, el mismo se pierde.

  Valor inicial
    Una posición de la memoria, siempre tiene un valor.  El mismo, puede no ser significativo.
    Por lo tanto, es conveniente, dar un valor inicial a toda variable.

    A la operación de dar un valor inicial se la denomina "inicialización".

  Tipos de datos compatibles
    Ejemplo: todos los enteros pueden almacenarse en una variable de tipo decimal.

    Decimal a
    a = 3.14
    a = 10        --> 10.0

    Ejemplo: los caracteres se pueden almacenar en una variable de tipo cadena de caracteres.

    Cadena nombre
    nombre = 'a'  --> "a"

---------------------------------------------------------------------
Conceptos a revisar: 
  Algoritmo
    Método: 
      método lógico que sirve para indicar como resolver un problema.
    Necesidad:
      necesidad de resolver tareas complejas o que se presten a ambigüedades (que se puedan malinterpretar).

    Características
      finito: cantidad de pasos
      preciso: siempre arroja el mismo resultado
      no puede ser ambiguo (malinterpretado)
      ordenado: de comienzo al final
      no depende de lenguajes de programación o arquitecturas (tipos de computadoras)

    Ejemplos
      multiplicación
      procesos de fabricación

  Pseudocódigo
    Es un lenguaje, parecido a los lenguajes de programación, que sirve para formular algoritmos.
    Es muy fácil, traducir un programa en pseudocódigo a un lenguaje de programación.

  Estructura secuencial
    Se sigue un orden de principio a final
    No se saltean instrucciones

---------------------------------------------------------------------
Leer
  Es un tipo especial de asignación, que almacena en una variable, un valor tomado desde el teclado.
  Por ejemplo:
    leer a

  Quiere decir: 
    que el programa se detiene hasta que el usuario ingrese un valor, a través del teclado, y presione la tecla ENTER. Inmediatamente, ese valor, se asigna a la variable indicada (en el ejemplo a)


---------------------------------------------------------------------
Escribir
  Significa mostrar el valor o expresión deseada en la pantalla.
  Por ejemplo:
    escribir 10

  Mostraría el número 10 en la pantalla

    escribir "hola"

  Mostraría la palabra hola, sin comillas en la pantalla.

    escribir 2 * 8

  Mostraría el valor 16 en la pantalla

                    a   b   aux    pantalla
  leer a            10    -    -     10 <ENTER>
  leer b            10     5    -       5 <ENTER>
  aux = a          10   5   10
  a = b             5   5   10
  b = aux           5  10   10            
  escribir a         5  10   10    5
  escribir b         5  10   10    10


---------------------------------------------------------------------
Clase 05
Fecha: Miércoles
---------------------------------------------------------------------
Estructura básica (patrón) de un algoritmo secuencial
  Inicio
    Declaraciones
    Entradas
    Procesos/cálculos
    Salidas
  Fin

---------------------------------------------------------------------
Enunciados de algoritmos

---------------------------------------------------------------------
Práctica: Pseudocódigo
=======
  123             E       CADENA:   6
  "argentina"     S       ENTERO:   4
  18              E       DECIMAL:  4
  'a'             C       CARACTER: 3
  8.88801         D       LOGICO:   2
  "12345"         S       ERROR:    9
  true            L
  ""              S
  880             E
  'X'             C
  8.000 1         ERR
  '1100'          ERR
  "canción"       S
  1,234,567.98    ERR
  0.1             D
  '1'             C
  '17'            ERR
  ''              ERR
  "precio         ERR
  3.14            D
  0.00001         D
  'buenos aires'  ERR
  0 03            ERR
  "d'artagnan"    S
  false           L
  4,45            ERR
  1200            E
  "ahora"         S
>>>>>>> f9ab20ccc60cbd144eba37d3bbdaeb78993499ad

---------------------------------------------------------------------
Práctica: Operadores
  Suma            +
  Resta           -
  Producto        *
  División        /
  Módulo          %
  And             &
  Or              |

---------------------------------------------------------------------
Operadores (2da parte)
  Potencia
    2^3   -->  2 al cubo  --> 2 * 2 * 2  --> 8
    2^4   -->  2 a la cuarta --> 2 * 2 * 2 * 2 --> 16
    2^5   -->  32
    3^2   -->  3 al cuadrado --> 3 * 3 --> 9
    3^4   -->  3 a la cuarta --> 3 * 3 * 3 * 3 --> 81 

  Orden de precedencia de los operadores aritméticos
    2 * 2 + 2
      4   + 2
          6

    2 + 2 * 2
    2 +   4
      6

    La multiplicación tiene precedencia sobre la suma
    y la resta

    3 * 3 - 3
      9   - 3
          6

    3 - 3 * 3
    3 -   9
      -6

    La división, también, tiene precedencia sobre la
    suma y la resta

  Paréntesis
    Los paréntesis () permiten alterar el orden de
    precedencia de los operadores.

    2 + 2 * 2 
    2 +   4
      6

    (2 + 2) * 2
       4    * 2
            8

    Anidar paréntesis
    ((4 + 2) * 2) - 2
    (   6    * 2) - 2
            12    - 2
                 10

---------------------------------------------------------------------
Práctica: Variables 
  Cuales están ok y cuales son recomendables?
  XRayo     ok        no
  X_Rayo    ok        no
  R2D2      ok        no
  X         ok        no
  45        mal 
  N14       ok        no
  ZZZZ      ok        no
  3μ        mal  
  nombre    ok        si
  suma      ok        si
  monto     ok        si
  i         ok        si
  n1        ok        si
  n2        ok        si
  3n        mal

---------------------------------------------------------------------
Variables (2da parte)
  Nombres (recomendación): CamelCase o notación húngara

  montoTotal
  importeNeto
  nombreCompleto
  
  (UpperCase: mayúsculas)
  (LowerCase: minúsculas)



---------------------------------------------------------------------
Práctica: Asignación        a   b   c   d
  a = 1                     1
  b = 2                     1   2
  c = a                     1   2   1
  d = a + c                 1   2   1   2
  d = b                     1   2   1   2
  Valor final de b? 2

                      a     b
  a = 1               1     -
  b = 2               1     2
  a = b               2     2
  b = a               2     2
  Valor final de a y de b? ambos valen 2

                      a     b     aux
  a = 1               1     -     -
  b = 2               1     2     -
  aux = a             1     2     1
  a = b               2     2     1
  b = aux             2     1     1
  Valor final de a y de b? a: 2 y b: 1

  horasTrabajadas = 10
  precioPorHora = 100
  descuento = 0.10
  sueldoBruto = horasTrabajadas * precioPorHora
                      10        *     100
                              1000
  obraSocial = sueldoBruto * descuento
                  1000     *    0.1
                          100
  sueldoNeto = sueldoBruto - obraSocial
                  1000     -    100
                          900
  Calcular sueldoNeto: 
    sueldoBruto = 1000
    obraSocial = 100
    sueldoNeto = 900


  n = 100
  m = 101
  n = "hola"
  Valor final de n?   Error: porque cada variable
                      puede tener valores de un
                      solo tipo de datos

---------------------------------------------------------------------
Asignación (2da parte)
  Sintáxis
    a = 1
    Quiere decir: almacenar en la memoria "apuntada" por a, el valor 1.  Siempre y cuando la variable a sea de tipo entero.

    En la práctica, se puede decir, "a toma el valor de 1"

    Si, la variable a, tenía un valor anterior, el mismo se pierde.

  Valor inicial
    Una posición de la memoria, siempre tiene un valor.  El mismo, puede no ser significativo.
    Por lo tanto, es conveniente, dar un valor inicial a toda variable.

    A la operación de dar un valor inicial se la denomina "inicialización".

  Tipos de datos compatibles
    Ejemplo: todos los enteros pueden almacenarse en una variable de tipo decimal.

    Decimal a
    a = 3.14
    a = 10        --> 10.0

    Ejemplo: los caracteres se pueden almacenar en una variable de tipo cadena de caracteres.

    Cadena nombre
    nombre = 'a'  --> "a"

---------------------------------------------------------------------
Conceptos a revisar: 
  Algoritmo
    Método: 
      método lógico que sirve para indicar como resolver un problema.
    Necesidad:
      necesidad de resolver tareas complejas o que se presten a ambigüedades (que se puedan malinterpretar).

    Características
      finito: cantidad de pasos
      preciso: siempre arroja el mismo resultado
      no puede ser ambiguo (malinterpretado)
      ordenado: de comienzo al final
      no depende de lenguajes de programación o arquitecturas (tipos de computadoras)

    Ejemplos
      multiplicación
      procesos de fabricación

  Pseudocódigo
    Es un lenguaje, parecido a los lenguajes de programación, que sirve para formular algoritmos.
    Es muy fácil, traducir un programa en pseudocódigo a un lenguaje de programación.

  Estructura secuencial
    Se sigue un orden de principio a final
    No se saltean instrucciones

---------------------------------------------------------------------
Leer
  Es un tipo especial de asignación, que almacena en una variable, un valor tomado desde el teclado.
  Por ejemplo:
    leer a

  Quiere decir: 
    que el programa se detiene hasta que el usuario ingrese un valor, a través del teclado, y presione la tecla ENTER. Inmediatamente, ese valor, se asigna a la variable indicada (en el ejemplo a)


---------------------------------------------------------------------
Escribir
  Significa mostrar el valor o expresión deseada en la pantalla.
  Por ejemplo:
    escribir 10

  Mostraría el número 10 en la pantalla

    escribir "hola"

  Mostraría la palabra hola, sin comillas en la pantalla.

    escribir 2 * 8

  Mostraría el valor 16 en la pantalla

                    a   b   aux   pantalla
  leer a           10   -   -     10 <ENTER>
  leer b           10   5   -     5 <ENTER>
  aux = a          10   5   10
  a = b             5   5   10
  b = aux           5  10   10            
  escribir a        5  10   10    5
  escribir b        5  10   10    10



---------------------------------------------------------------------
Clase 04: 
Fecha: Lunes 18 de septiembre
---------------------------------------------------------------------
Práctica: Tipos de datos
Cuantos de los siguientes valores pertenecen a cada tipo de datos (enteros, decimales, lógicos, caracteres, cadenas de caracteres) y cuantos son erróneos?
  123              E       CADENA:   6
  "argentina"      S       ENTERO:   4
  18               E       DECIMAL:  4
  'a'              C       CARACTER: 3
  8.88801          D       LOGICO:   2
  "12345"          S       ERROR:    9
  true             L 
  ""               S
  880              E
  'X'              C
  8.000 1          ERR
  '1100'           ERR
  "canción"        S
  1,234,567.98     ERR
  0.1              D
  '1'              C
  '17'             ERR
  ''               ERR
  "precio          ERR
  3.14             D
  0.00001          D
  'buenos aires'   ERR
  0 03             ERR
  "d'artagnan"     S
  false            L
  4,45             ERR
  1200             E
  "ahora"          S

---------------------------------------------------------------------
Práctica: Operadores
  Suma             +
  Resta            -
  Producto         *
  División         /
  Módulo           %
  And              &
  Or               |

---------------------------------------------------------------------
Operadores (2da parte)
  Potencia
    2^3   -->  2 al cubo  --> 2 * 2 * 2  --> 8
    2^4   -->  2 a la cuarta --> 2 * 2 * 2 * 2 --> 16
    2^5   -->  32
    3^2   -->  3 al cuadrado --> 3 * 3 --> 9
    3^4   -->  3 a la cuarta --> 3 * 3 * 3 * 3 --> 81 

  Orden de precedencia de los operadores aritméticos
    2 * 2 + 2
      4   + 2
          6

    2 + 2 * 2
    2 +   4
      6

    La multiplicación tiene precedencia sobre la suma
    y la resta

    3 * 3 - 3
      9   - 3
          6

    3 - 3 * 3
    3 -   9
      -6

    La división, también, tiene precedencia sobre la
    suma y la resta

  Paréntesis
    Los paréntesis () permiten alterar el orden de
    precedencia de los operadores.

    2 + 2 * 2 
    2 +   4
      6

    (2 + 2) * 2
       4    * 2
             8

    Anidar paréntesis
    ((4 + 2) * 2) - 2
    (   6    * 2) - 2
            12    - 2
                 10

---------------------------------------------------------------------
Práctica: Variables 
  Cuales están ok y cuales son recomendables?
  XRayo      ok         no
  X_Rayo     ok         no
  R2D2       ok         no
  X          ok         no
  45         mal 
  N14        ok         no
  ZZZZ       ok         no
  3μ         mal  
  nombre     ok         si
  suma       ok         si
  monto      ok         si
  i          ok         si
  n1         ok         si
  n2         ok         si
  3n         mal

---------------------------------------------------------------------
Variables (2da parte)
  Nombres (recomendación): CamelCase o notación húngara

  montoTotal
  importeNeto
  nombreCompleto
  
  (UpperCase: mayúsculas)
  (LowerCase: minúsculas)



---------------------------------------------------------------------
Práctica: Asignación        a   b   c   d
  a = 1                     1
  b = 2                     1   2
  c = a                     1   2   1
  d = a + c                 1   2   1   2
  d = b                     1   2   1   2
  Valor final de b? 2

                      a     b
  a = 1               1     -
  b = 2               1     2
  a = b               2     2
  b = a               2     2
  Valor final de a y de b? ambos valen 2

                      a     b     aux
  a = 1               1     -     -
  b = 2               1     2     -
  aux = a             1     2     1
  a = b               2     2     1
  b = aux             2     1     1
   Valor final de a y de b? a: 2 y b: 1

   horasTrabajadas = 10
   precioPorHora = 100
   descuento = 0.10
   sueldoBruto = horasTrabajadas * precioPorHora
                       10        *     100
                               1000
   obraSocial = sueldoBruto * descuento
                   1000     *    0.1
                           100
   sueldoNeto = sueldoBruto - obraSocial
                   1000     -    100
                           900
   Calcular sueldoNeto: 
     sueldoBruto = 1000
     obraSocial = 100
     sueldoNeto = 900


  n = 100
  m = 101
  n = "hola"
  Valor final de n?    Error: porque cada variable
                      puede tener valores de un
                      solo tipo de datos

---------------------------------------------------------------------
Asignación (2da parte)
  Sintáxis
    a = 1
    Quiere decir: almacenar en la memoria "apuntada" por a, el valor 1.  Siempre y cuando la variable a sea de tipo entero.

    En la práctica, se puede decir, "a toma el valor de 1"

    Si, la variable a, tenía un valor anterior, el mismo se pierde.

  Valor inicial
    Una posición de la memoria, siempre tiene un valor.  El mismo, puede no ser significativo.
    Por lo tanto, es conveniente, dar un valor inicial a toda variable.

    A la operación de dar un valor inicial se la denomina "inicialización".

  Tipos de datos compatibles
    Ejemplo: todos los enteros pueden almacenarse en una variable de tipo decimal.

    Decimal a
    a = 3.14
    a = 10        --> 10.0

    Ejemplo: los caracteres se pueden almacenar en una variable de tipo cadena de caracteres.

    Cadena nombre
    nombre = 'a'  --> "a"

---------------------------------------------------------------------
Conceptos a revisar: 
  Algoritmo
    Método: 
      método lógico que sirve para indicar como resolver un problema.
    Necesidad:
      necesidad de resolver tareas complejas o que se presten a ambigüedades (que se puedan malinterpretar).

    Características
      finito: cantidad de pasos
      preciso: siempre arroja el mismo resultado
      no puede ser ambiguo (malinterpretado)
      ordenado: de comienzo al final
      no depende de lenguajes de programación o arquitecturas (tipos de computadoras)

    Ejemplos
      multiplicación
      procesos de fabricación

  Pseudocódigo
    Es un lenguaje, parecido a los lenguajes de programación, que sirve para formular algoritmos.
    Es muy fácil, traducir un programa en pseudocódigo a un lenguaje de programación.

  Estructura secuencial
    Se sigue un orden de principio a final
    No se saltean instrucciones

---------------------------------------------------------------------
Leer
  Es un tipo especial de asignación, que almacena en una variable, un valor tomado desde el teclado.
  Por ejemplo:
    leer a

  Quiere decir: 
    que el programa se detiene hasta que el usuario ingrese un valor, a través del teclado, y presione la tecla ENTER. Inmediatamente, ese valor, se asigna a la variable indicada (en el ejemplo a)


---------------------------------------------------------------------
Escribir
  Significa mostrar el valor o expresión deseada en la pantalla.
  Por ejemplo:
    escribir 10

  Mostraría el número 10 en la pantalla

    escribir "hola"

  Mostraría la palabra hola, sin comillas en la pantalla.

    escribir 2 * 8

  Mostraría el valor 16 en la pantalla

                    a   b   aux    pantalla
  leer a            10    -    -     10 <ENTER>
  leer b            10     5    -       5 <ENTER>
  aux = a          10   5   10
  a = b             5   5   10
  b = aux           5  10   10            
  escribir a         5  10   10    5
  escribir b         5  10   10    10



---------------------------------------------------------------------
Clase 05
Fecha: Miércoles 20 de septiembre
---------------------------------------------------------------------

Estructura básica (patrón) de un algoritmo secuencial
  Inicio
    Declaraciones
    Entradas
    Procesos/cálculos
    Salidas
  Fin

Indentación: 
  sangrías, espacios en blanco, representa una dependencia
  Es importante para la legibilidad.

Declaraciones:
  Es la sección del algoritmo donde se indican los nombres y tipos de 
  variables que se utilizaran.

  Ej:
    Entero sueldoBruto
    Entero impuestos
    Decimal descuento
    Cadena nombre
    Cadena domicilioLaboral
    Logico estadoCivil
    Carácter codigo

Entradas
  leer a

    Significa que el programa cesa de ejecutarse hasta que el usuario
    ingresa a través del teclado un valor el cual se asigna a la 
    variable a cuando este presione la tecla <ENTER>

  leer "Ingrese su nombre: " nombre

Procesos/cálculos
  asignaciones
  Ej: 
    sueldoBruto = horasTrabajadas * precioHora

Salidas:
  Es la parte del programa donde se visualiza la información que, 
  en definitiva, requiere el usuario.


---------------------------------------------------------------------
Práctica: Pseudocódigo

Ejemplos completos:
  El siguiente algoritmo realiza la suma de dos números enteros
  ingresados por el usuario y muestra el resultado de la misma.

  Inicio
    Entero a
    Entero b
    Entero suma

    leer a
    leer b

    suma = a + b

    escribir suma
  Fin


  El siguiente algoritmo realiza la suma, resta, multiplicación y
  división entre dos números enteros ingresados por teclado. A 
  continuación muestra los resultados de dichas operaciones en 
  formato decimal.

  Inicio
    Entero a
    Entero b
    Decimal suma
    Decimal resta
    Decimal multipicacion
    Decimal division

    leer a
    leer b

    suma = a + b
    resta = a - b
    multiplicacion = a * b
    division = a / b

    escribir suma
    escribir resta
    escribir multiplicacion
    escribir division
  Fin

  Inicio
    Entero a
    Entero b
    Decimal resultado

    leer a
    leer b

    resultado = a + b
    escribir resultado

    resultado = a - b
    escribir resultado

    resultado = a * b
    escribir resultado

    resultado = a / b
    escribir resultado
  Fin


---------------------------------------------------------------------
Conceptos generales de computación
---------------------------------------------------------------------
Sistemas operativos
  El sistema operativo original de las PC se llamaba MS DOS este sistema
  operativo no constaba de interfaz gráfica

Concepto
  Es un conjunto de programas que sirven para ocultar la complejidad del
  hardware.

Estructura
  Shell o interfaz de usuario
    Lo que ve el usuario, es la parte visible del sistema operativo
    Existen interfaces
      Gráficas
      Solo texto
  Núcleo o kernel
    es la parte central y es lo que algunos consideran el "verdadero"
    sistema operativo
  Controladores de dispositivos o drivers
    Son programas que sirven para que el sistema operativo reconozca
    cada tipo específico de dispositivos.



---------------------------------------------------------------------
Clase 06
Fecha: Sábado 23 de septiembre
---------------------------------------------------------------------

# Nivelación de aritmética
## Números naturales
### Suma de números naturales
#### Propiedad de clausura
#### Propiedad conmutativa de la suma
#### Propiedad asociativa de la suma
### Multiplicación en los números naturales
#### Propiedad de clausura
#### Propiedad conmutativa
#### Propiedad asociativa
#### Propiedad distributiva respecto de la suma
### Precedencia de los operadores
### La resta en los números naturales
### División con y sin resto
### El neutro aditivo
## Los números enteros
## Los números racionales
### Fracciones
#### Fracciones equivalentes
## Los números irracionales
### Pi π y Raiz cuadrada de 2
## Los números reales
## Operación de inclusión
### La suma de enteros 
#### Suma de enteros con igual signo
#### Suma de enteros con signo diferente
### El producto en los números reales
#### Regla de los signos
#### Uso de los paréntesis para alterar el orden de precedencia
#### Fracciones de igual denominador
#### Fracciones con diferente denominador
Común denominador
  Por producto
  Por factores comunes


---------------------------------------------------------------------
Enunciados de algoritmos

01 
  Escriba el pseudocódigo para resolver la suma y el producto de dos números ingresados por teclado. Al finalizar se debe mostrar ambos resultados.

  Inicio
    Entero a
    Entero b
    Entero suma
    Entero producto

    leer a
    leer b

    suma = a + b
    producto = a * b

    escribir suma
    escribir producto
  Fin

02
  Teniendo en cuenta el patrón que sigue un algoritmo secuencial (tal como se ve en el ejercicio anterior), escribir un pseudocódigo para mostrar el doble y el triple de un número entero ingresado por teclado.

  Inicio
    Entero a
    Entero doble
    Entero triple

    leer a

    doble = a * 2
    triple = a * 3

    escribir doble
    escribir triple
  Fin

---------------------------------------------------------------------
Algoritmos secuencial (en pseudocódigo)
---------------------------------------------------------------------
  Inicio
    Declaraciones
    Entradas
    Proceso/Cálculo
    Salidas
  Fin
---------------------------------------------------------------------

03
  Escribir en pseudocódigo un algoritmo que permita calcular el perímetro y la superficie de un rectángulo cuyos lados se ingresen por teclado.  Recuerde que el perímetro de un rectángulo es igual al doble de la suma de dos lados diferentes (ancho y alto) y la superficie es igual al producto de dichos lados.

  Inicio
    Entero base
    Entero altura
    Entero perimetro
    Entero superficie

    leer base
    leer altura

    perimetro = (base + altura) * 2
    superficie = base * altura

    escribir perimetro
    escribir superficie
  Fin

04
  Escribir el pseudocódigo para calcular una distancia, supuestamente en centímetros, ingresada por teclado y expresar la salida en pulgadas.  Considerando que una pulgada es igual a 2.54 centímetros.

  Inicio
    Entero distanciaEnCm
    Decimal distanciaEnPulgadas

    leer distanciaEnCm

    distanciaEnPulgadas = distanciaEnCm / 2.54

    escribir distanciaEnPulgadas
  Fin

05
  Escribir el pseudocódigo para calcular un monto en dólares americanos dada una entrada en pesos argentinos expresada en forma decimal y otra entrada que indica el valor del dolar con respecto al peso.
  El calculo se debe mostrar en pantalla.

  Inicio
    Decimal pesosArgentinos
    Decimal cotizacionDolar
    Decimal dolares

    leer pesosArgentinos
    leer cotizacionDolar

    dolares = pesosArgentinos / cotizacionDolar

    escribir dolares
  Fin

---------------------------------------------------------------------
Conceptos generales de computación
Hardware - computadoras
---------------------------------------------------------------------

Dispositivos
  Componentes electrónicos periféricos que hacen de interfaz con el usuario.  Los dispositivos se dividen, a su vez, en dos categorías:
    Entrada
    Salida
Procesador
  Es el componente encargado de hacer el control y los cálculos de la computadora en funcion de las entradas y de enviar los resultados a la salida (a través de los dispositivos correspondientes).  El procesador, para esta tarea es auxiliado por algunos componentes, el más importante de ellos, es la memoria principal o memoria de trabajo.

Ejemplos de dispositivos de entrada:
  Teclado
  Mouse
  Lector biométrico de huellas digitales
  Joystick 
  Touchpad
  Lápiz óptico
  Tableta digitalizadora
  Scanner
  Disco rígido (memoria auxiliar)
  Unidades ópticas (DVD)
  Pen Drive

Ejemplos de dispositivos de salida: 
  Monitor/Proyector
  Impresora
  Disco rígido (memoria auxiliar)
  Unidades ópticas (DVD)
  Pen Drive

Procesador (CPU: unidad central de proceso)
  ALU: Unidad de aritmética y lógica
  CU: Unidad de control
  Registros: 
    Son memorias muy pequeñas, ultra rápidas, se utilizan para realizar los cálculos de la ALU.
  Memoria cache interna:
    Son memorias que permiten acelerar los procesos




